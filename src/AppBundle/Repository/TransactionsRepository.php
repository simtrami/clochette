<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * TransactionsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TransactionsRepository extends EntityRepository
{
    /**
     * Pagination tweak collectivised here:
     * https://anil.io/blog/symfony/doctrine/symfony-and-doctrine-pagination-with-twig/
     * All credits to Anil
     *
     * @param int $currentPage
     * @param int $limit
     * @return Paginator
     */
    public function findAllPaginated($currentPage = 1, $limit = 20): Paginator
    {
        $qb = $this->createQueryBuilder('t')
            ->orderBy('t.timestamp', 'DESC')
            ->getQuery();

        return $this->paginate($qb, $currentPage, $limit);
    }

    /**
     * @param $dql
     * @param int $page
     * @param int $limit
     * @return Paginator
     */
    private function paginate($dql, $page = 1, $limit = 10): Paginator
    {
        $paginator = new Paginator($dql);

        $paginator->getQuery()
            ->setFirstResult($limit * ($page - 1)) // Offset
            ->setMaxResults($limit); // Limit

        return $paginator;
    }

    public function returnTransactionsSince($timestamp)
    {
        $qb = $this->createQueryBuilder('t');

        $qb
            ->where('t.timestamp > :timestamp')
            ->setParameter('timestamp', $timestamp)
            ->orderBy('t.timestamp', 'DESC');

        return $qb->getQuery()->getResult();
    }

    public function returnNotRegisteredTransactions(){
        $qb = $this->createQueryBuilder('t');

        $qb
            ->where('t.zreport IS NULL');

        return $qb->getQuery()->getResult();
    }
}
